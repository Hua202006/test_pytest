{"name": "Recharge_会员id不存在", "status": "failed", "statusDetails": {"message": "AssertionError: assert 1001 == 1007\n  +1001\n  -1007", "trace": "self = <test_project.TestProject object at 0x0000025475F8FE88>\none_testcase = <scripts.handle_excel.TestCase object at 0x00000254747B1488>\n\n    @allure.title(\"{one_testcase.name}\")\n    @pytest.mark.parametrize(\"one_testcase\", testcases_data)\n    def test_project(self, one_testcase):\n        # 创建HandleMysql对象\n        self.do_mysql = HandleMysql()\n        new_data = Parameterize.to_param(one_testcase.data)  # 将excel中读取的请求参数进行参数化\n        new_url = do_yaml.get_data('api', 'base_url') + one_testcase.url\n        check_sql = one_testcase.check_sql  # 从表格中获取sql语句\n        if check_sql and one_testcase.name != '借款人加标':  # 判断语句，不存在check_sql，不执行\n            check_sql = Parameterize.to_param(check_sql)  # 参数化\n            mysql_data = self.do_mysql.get_one_value(sql=check_sql)\n            amount_before = float(mysql_data['leave_amount'])\n        res = self.do_request.send(one_testcase.method, new_url, json=new_data)  # 发起请求\n        actual_value = res.json()  # 响应值转化为字典\n        expect_result = json.loads(one_testcase.expected_value)\n        try:\n            for expect in expect_result.keys():\n                assert expect_result[expect] == actual_value[expect]\n            if check_sql and one_testcase.name != '借款人加标':  # 判断语句，不存在check_sql，不执行\n                check_sql = Parameterize.to_param(check_sql)\n                mysql_data = self.do_mysql.get_one_value(sql=check_sql)\n                amount_after = float(mysql_data['leave_amount'])  # 数据库中金额数量（充值后的）\n                one_dict = json.loads(new_data, encoding='utf-8')  # 将json字符串转化为字典\n                currrent_recharge_amount = float(one_dict['amount'])  # 取出充值的金额\n                actual_amount = amount_before + currrent_recharge_amount  # 实际金额总数=充值前+充值的金额\n                assert actual_amount == amount_after\n    \n    \n        except AssertionError as e:\n            do_log.error(f\"{one_testcase.name}:具体异常为{e}\")\n            self.do_excel.write_excel(one_testcase, res.text, '失败')\n            print(f\"用例：{one_testcase.name}---测试失败\")\n>           raise e\n\ncases\\test_project.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <test_project.TestProject object at 0x0000025475F8FE88>\none_testcase = <scripts.handle_excel.TestCase object at 0x00000254747B1488>\n\n    @allure.title(\"{one_testcase.name}\")\n    @pytest.mark.parametrize(\"one_testcase\", testcases_data)\n    def test_project(self, one_testcase):\n        # 创建HandleMysql对象\n        self.do_mysql = HandleMysql()\n        new_data = Parameterize.to_param(one_testcase.data)  # 将excel中读取的请求参数进行参数化\n        new_url = do_yaml.get_data('api', 'base_url') + one_testcase.url\n        check_sql = one_testcase.check_sql  # 从表格中获取sql语句\n        if check_sql and one_testcase.name != '借款人加标':  # 判断语句，不存在check_sql，不执行\n            check_sql = Parameterize.to_param(check_sql)  # 参数化\n            mysql_data = self.do_mysql.get_one_value(sql=check_sql)\n            amount_before = float(mysql_data['leave_amount'])\n        res = self.do_request.send(one_testcase.method, new_url, json=new_data)  # 发起请求\n        actual_value = res.json()  # 响应值转化为字典\n        expect_result = json.loads(one_testcase.expected_value)\n        try:\n            for expect in expect_result.keys():\n>               assert expect_result[expect] == actual_value[expect]\nE               assert 1001 == 1007\nE                 +1001\nE                 -1007\n\ncases\\test_project.py:37: AssertionError"}, "attachments": [{"name": "log", "source": "a04c373c-7539-451d-8df9-517bef111f37-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "one_testcase", "value": "<scripts.handle_excel.TestCase object at 0x00000254747B1488>"}], "start": 1630500358792, "stop": 1630500358901, "uuid": "148e7231-02ee-4996-aae1-2ce21f2b6f15", "historyId": "9aeaa01f7e9f060eb71b860485b33d06", "testCaseId": "428abb32b3140dbfd934ee0050646ed9", "fullName": "cases.test_project.TestProject#test_project", "labels": [{"name": "parentSuite", "value": "cases"}, {"name": "suite", "value": "test_project"}, {"name": "subSuite", "value": "TestProject"}, {"name": "host", "value": "LAPTOP-VI0AG2S8"}, {"name": "thread", "value": "12120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "cases.test_project"}]}